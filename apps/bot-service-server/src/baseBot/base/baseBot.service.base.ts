/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BaseBot as PrismaBaseBot,
  Bot as PrismaBot,
  AiModel as PrismaAiModel,
} from "@prisma/client";

export class BaseBotServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BaseBotCountArgs, "select">): Promise<number> {
    return this.prisma.baseBot.count(args);
  }

  async baseBots(args: Prisma.BaseBotFindManyArgs): Promise<PrismaBaseBot[]> {
    return this.prisma.baseBot.findMany(args);
  }
  async baseBot(
    args: Prisma.BaseBotFindUniqueArgs
  ): Promise<PrismaBaseBot | null> {
    return this.prisma.baseBot.findUnique(args);
  }
  async createBaseBot(args: Prisma.BaseBotCreateArgs): Promise<PrismaBaseBot> {
    return this.prisma.baseBot.create(args);
  }
  async updateBaseBot(args: Prisma.BaseBotUpdateArgs): Promise<PrismaBaseBot> {
    return this.prisma.baseBot.update(args);
  }
  async deleteBaseBot(args: Prisma.BaseBotDeleteArgs): Promise<PrismaBaseBot> {
    return this.prisma.baseBot.delete(args);
  }

  async findBots(
    parentId: string,
    args: Prisma.BotFindManyArgs
  ): Promise<PrismaBot[]> {
    return this.prisma.baseBot
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bots(args);
  }

  async getAiModel(parentId: string): Promise<PrismaAiModel | null> {
    return this.prisma.baseBot
      .findUnique({
        where: { id: parentId },
      })
      .aiModel();
  }
}
